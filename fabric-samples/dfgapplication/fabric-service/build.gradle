import java.text.SimpleDateFormat

buildscript {
    ext {
        springBootVersion = "2.1.5.RELEASE"
    }
    ext["spock.version"] = "1.1-groovy-2.4"
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17")
    }
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: "groovy"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "com.gorylenko.gradle-git-properties"

gitProperties {
    dateFormat = "yyyy-MM-dd HH:mm"
    dateFormatTimeZone = "GMT+8"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group 'org.union'

repositories {
    mavenCentral()
}

ext {
    springCloudVersion = "Greenwich.SR2"
    byteBuddyVersion = "1.8.0"
    objenesisVersion = "2.6"
    janinoVersion = "3.0.6"
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            //artifact javadocJar
        }
    }
    repositories {
        maven {
            url "http://nexus.intranet.huiyin.com/repository/maven-${project.version.endsWith("-SNAPSHOT") ? "snapshots" : "releases"}"
            credentials {
                username "$nexusUsername"
                password "$nexusPassword"
            }
        }
    }
}

publish.dependsOn(build)

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}

def buildTime() {
    final dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ")
    dateFormat.timeZone = TimeZone.getTimeZone('Asia/Shanghai')
    dateFormat.format(new Date())
}

springBoot {
    buildInfo {
        properties{
            // Generate extra build info.
            additionalProperties = [
                    by                   : System.properties['user.name'],
                    operatingSystem      : "${System.properties['os.name']} (${System.properties['os.version']})",
                    continuousIntegration: System.getenv('CI') ? true : false,
                    machine              : InetAddress.localHost.hostName,
                    // Override buildInfo property time
                    time                 : buildTime()
            ]
        }
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    runtime 'mysql:mysql-connector-java'
    compile 'com.zaxxer:HikariCP'

    compile('com.github.pagehelper:pagehelper-spring-boot-starter:1.2.3')

    compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.0')
    compile group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: '1.5.10.RELEASE'


    //annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    testCompile("org.codehaus.groovy:groovy-all")
    testCompile("org.spockframework:spock-core")
//        testCompile "cglib:cglib-nodep:3.2.5" // for mocking classes
    testCompile("org.objenesis:objenesis:$objenesisVersion") // for mocking final classes
    testCompile("net.bytebuddy:byte-buddy:$byteBuddyVersion")
    testCompile("net.bytebuddy:byte-buddy-agent:$byteBuddyVersion")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.spockframework:spock-spring")

}
